Description: Use current locale and system time for display by default
 I was getting too lazy to type out the long string of parameters
 to manually set the output character set and the full date every time
 I wanted to check the current date in Lunar calendar, hence this patch.
 It was also a good little exercise to brush up my C programming skill.  :-)
 .
 First applied in 2.2-4.
Author: Anthony Fok <foka@debian.org>
Origin: vendor
Last-Update: 2013-11-15
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/lunar.c
+++ b/lunar.c
@@ -1,6 +1,6 @@
 /* $Id: lunar.c,v 1.6 2001/10/29 05:55:39 fflee Exp $ */
 
-char version[] = "Lunar Version 2.2 (October 28, 2001)";
+char version[] = "Lunar Version 2.2-4 (Debian) (October 4, 2013)";
 
 /*----------------------------------------------------------------------------
 
@@ -66,6 +66,7 @@ References:
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <time.h>
 
 /* "Bitmap" constants */
 #define	BMRow	7	/* number of rows for each bitmap */
@@ -212,10 +213,56 @@ char *argv[];
 {
     int year, month, day, hour, i, k, option, inverse=0, leap=0;
     int dateInfo[4];
+    time_t cur_time;
+    struct tm *now;
+    char *locale, *s;
+    char *language, *territory, *codeset;
 
     progname = "lunar";
     printf("%s\n\n", version);
 
+    locale = getenv("LC_ALL");
+    if (locale == NULL)
+	locale = getenv("LANG");
+    if (locale)
+    {
+	/* Form: language[_territory][.codeset][@modifier] */
+	s = strdup(locale);
+	language = strsep(&s, "_.@");
+	s = strdup(locale);
+	strsep(&s, "_");
+	territory = strsep(&s, "_.@");
+	s = strdup(locale);
+	strsep(&s, ".");
+	codeset = strsep(&s, ".@");
+#if 0
+	s = strdup(locale);
+	strsep(&s, "@");
+	char *modifier = strsep(&s, "@");
+
+	printf("%s_%s.%s@%s\n", language, territory, codeset, modifier);
+#endif
+	if (codeset)
+	{
+	    if (!strcasecmp(codeset, "UTF-8") || !strcasecmp(codeset, "utf8"))
+	    {
+		if (!strcmp(language, "zh") ||
+		    !strcmp(language, "ja") ||
+		    !strcmp(language, "ko"))
+		    showHZ_UTF8 = 1;
+		if (territory &&
+		    (!strcmp(territory, "CN") || !strcmp(territory, "SG")))
+		    simplified = 1;
+	    }
+	    else if (!strcasecmp(codeset, "GB2312") ||
+		     !strcasecmp(codeset, "GBK") ||
+		     !strcasecmp(codeset, "GB18030"))
+		showHZ_GB = 1;
+	    else if (!strncasecmp(codeset, "Big5", 4))
+		showHZ_B5 = 1;
+	}
+    }
+
     for (k=1; k<argc && argv[k][0]=='-'; k++)
     {
 	option = argv[k][1];
@@ -265,18 +312,42 @@ char *argv[];
 	    default:  usage(); break;
 	}
     }
+
     if (showBM) readBM();
-    if (!((argc - k >= 3) && (argc - k <= 4))) usage();
-    dateInfo[3] = 0;
-    for (i=0; k<argc && i<4; k++, i++)
+
+    switch(argc - k)
     {
-	if (sscanf(argv[k], "%d", &dateInfo[i]) != 1)
+	case 0:
+	    if (inverse)
+		usage();
+	    else
+	    {
+		setenv("TZ", "UTC-8", 1);
+		cur_time = time(NULL);
+		now = localtime(&cur_time);
+		year  = now->tm_year + 1900;
+		month = now->tm_mon + 1;
+		day   = now->tm_mday;
+		hour  = now->tm_hour;
+	    }
+	    break;
+	case 3:
+	case 4:
+	    dateInfo[3] = 0;
+	    for (i=0; k<argc && i<4; k++, i++)
+	    {
+		if (sscanf(argv[k], "%d", &dateInfo[i]) != 1)
+		    usage();
+	    }
+	    year  = dateInfo[0];
+	    month = dateInfo[1];
+	    day   = dateInfo[2];
+	    hour  = dateInfo[3];
+	    break;
+	default:
 	    usage();
     }
-    year = dateInfo[0];
-    month = dateInfo[1];
-    day = dateInfo[2];
-    hour = dateInfo[3];
+
     if (!(year>=Cyear && year<Cyear+Nyear))
 	Error("Year out of range.");
     if (!(month>=1 && month<=12))
@@ -314,7 +385,7 @@ char *argv[];
 void usage()
 {
     printf("Usage:\n\n");
-    printf("Solar->Lunar:\t%s [-h] [-b] year month day [hour]\n", progname);
+    printf("Solar->Lunar:\t%s [-u] [-h] [-b] [year month day [hour]]\n", progname);
     printf("\t\t(in Solar Calendar, 24 hour clock)\n\n");
     printf("Lunar->Solar:\t%s [-u] [-h] [-b] -i [-l] year month day [hour]\n",
 	   progname);
